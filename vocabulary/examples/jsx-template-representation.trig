@prefix elmo: <http://dotwebstack.org/def/elmo#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix elmo-app: <http://dotwebstack.org/def/elmo/appearance/>.

@prefix config: <http://dotwebstack.org/configuration/jtr/>.

#Backend (only information products, theatre system config has been left out)

# NB: The use of ?SUBJECT (a bounded variable) is recommended above the use of <${SUBJECT}> (a generic template variable)
#     At this moment, ?SUBJECT only works for string literals, so cannot be used in this case

GRAPH config:Theatre {
  config:SubjectParameter a elmo:TermParameter;
    elmo:name "SUBJECT";
    elmo:shape [
      sh:nodeKind sh:IRI;
    ]
  .

  config:SubjectData a elmo:InformationProduct;
    elmo:requiredParameter config:SubjectParameter;
    elmo:query """
      construct {
        <${SUBJECT}> ?p ?o
      }
      where {
        <${SUBJECT}> ?p ?o
      }
    """
  .
  config:FriendsOfSubject a elmo:InformationProduct;
    elmo:requiredParameter config:SubjectParameter;
    elmo:query """
      select ?friend ?friend_label
      where {
        <${SUBJECT}> foaf:knows ?friend
        OPTIONAL {?friend rdfs:label ?friend_label}
      }
    """
  .
}

#Frontend
GRAPH config:MainStage {
  # This version creates a default jsx temnplate
  config:PersonRepresentation1 a elmo:Representation;
    elmo:appliesTo [a foaf:Person];
    elmo:informationProduct config:SubjectData;
    elmo:contains config:FriendsRepresentation;
  .
  config:FriendsRepresentation a elmo:Representation;
    elmo:name "Friends"; #Not realy necessary in the first two examples, but handy in the third example
    elmo:informationProduct config:FriendsOfSubject;
    elmo:appearance elmo-app:TableAppearance;
    elmo:fragment [
      elmo:appliesTo "friend";
      rdfs:label "Friend"@en;
      rdfs:label "Vriend"@nl;
    ];
  .
  
  # This version is identical the the previous, but with the jsx template as it would have been created
  # By stating a elmo:pageTemplate, the default jsx template is overriden (in this case replaced by an identical version...)
  config:PersonRepresentation2 a elmo:Representation;
    elmo:appliesTo [a foaf:Person];
    elmo:informationProduct config:SubjectData;
    elmo:contains config:FriendsRepresentation;
    elmo:pageTemplate """
      <div>
        <ContentAppearance />
        <TableAppearance about="http://dotwebstack.org/configuration/FriendsRepresentation">
          <fragment appliesTo="friend">
            <label lang="en">Friend</label>
            <label lang="nl">Vriend</label>
          </fragment>
        </TableAppearance>
      </div>
    """;
  .
  
  # This version is a manually made jsx template
  # The default jsx template is overriden, making it possible to add extra code. 
  # The property 'name' is used to link the TableAppearance with the specific representation
  # A third appearance is added, to show how to include linked data from different sources
  # At the location specified by the property 'src', RDF data is expected
  config:PersonRepresentation3 a elmo:Representation;
    elmo:appliesTo [a foaf:Person];
    elmo:informationProduct config:SubjectData;
    elmo:contains config:FriendsRepresentation;
    elmo:pageTemplate """
      <div class="row">
        <div class="col">
          <ContentAppearance />
        </div>
        <div class="col">
          <TableAppearance name="Friends">
            <fragment appliesTo="friend">
              <label lang="en">Friend</label>
              <label lang="nl">Vriend</label>
            </fragment>
          </TableAppearance>
        </div>
      </div>
      <div class="row">
        <GeoAppearance src="http://bag.basisregistraties.overheid.nl/bag/id/pand/0307100000333887" />
      </div>
    """;
  .
}
