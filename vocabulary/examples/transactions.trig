@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix elmo: <http://dotwebstack.org/def/elmo#>.
@prefix elmo-sp: <http://dotwebstack.org/def/elmo/persistence-strategy/>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.
@prefix http: <http://www.w3.org/2011/http#>.

@prefix config: <http://dotwebstack.org/configuration/trans/>.

#Backend (only transactions and information products, theatre system config has been left out)
GRAPH config:Theatre {
  config:MySparqlBackend a elmo:SparqlBackend;
		elmo:endpoint "http://localhost:8890/sparql"^^xsd:anyURI;
  .

	# Information product, retrieve any data for this subject
	config:SubjectData a elmo:InformationProduct;
		elmo:query """
			construct {
				${subject} ?p ?o
			}
			where {
				${subject} ?p ?o
			}
		"""
	.

	# Transaction: replace resource from graph
	config:InsertOrReplaceConcept a elmo:Transaction;
    elmo:sequentialFlow (
      [ a elmo:ValidationStep;
        elmo:conformsTo config:ConceptShapeGraph;
      ]
      [ a elmo:AssertionStep;
        rdfs:label "Er moet een label aanwezig zijn"@nl;
        elmo:assert """
          ASK {
            ?begrip rdfs:label ?label
          }
        """
      ]
      [ a elmo:UpdateStep;
        rdfs:label "Add missing labels"@en;
        elmo:backend elmo:TransactionRepository;
				elmo:query """
					insert {
						?concept rdfs:label ?label
					}
					where {
						?concept skos:prefLabel ?label.
						FILTER NOT EXISTS {
							?concept rdfs:label ?existinglabel
						}
					}
				""";
      ]
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-sp:InsertIntoGraph;
        elmo:backend config:MySparqlBackend;
        elmo:targetGraph <http://dotwebstack.org/all-concepts>;
      ]
      [
				a elmo:UpdateStep;
				rdfs:label "Add hash"@en;
        elmo:backend config:MySparqlBackend;
				elmo:query """
					insert {
						graph <http://dotwebstack.org/all-concepts> {
							?concept wdrs:hash ?hash
						}
					}
					where {
						graph <http://dotwebstack.org/all-concepts> {
							select (md5(?definition) as ?hash) {
								?concept skos:definition ?definition
							}
						}
					}
				"""
      ]
    )
  .

  config:DeleteConcept a elmo:Transaction;
    elmo:parallelFlow ( #Parallel or Sequential flow doesn't really matter when only one step is present
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-sp:DeleteResourceFromGraph;
        elmo:backend config:MySparqlBackend;
        elmo:targetGraph <http://dotwebstack.org/all-concepts>;
      ]
    )
	.
	config:Transform a elmo:Transaction;
    # Transformer should not be part of the transaction!
		#elmo:transformer [
		#	a elmo:RMLTransformer;
		#	elmo:sourceGraph config:RMLMap;
		#];
    elmo:sequentialFlow (
      [
        a elmo:PersistenceStep;
        elmo:persistenceStrategy elmo-sp:ReplaceGraph;
        elmo:backend config:MySparqlBackend;
        elmo:targetGraph <http://dotwebstack.org/uploaded-data>
      ]
    )
	.
}

#Frontend
GRAPH config:MainStage {
  config:SubjectFromUrl a elmo:UriParameterMapper;
    elmo:source http:requestURI;
    elmo:pattern "http://{domain}/{path}/doc/{reference}";
    elmo:template "http://demo.dotwebstack.org/{path}/id/{reference}";
    elmo:target elmo:SubjectParameter;
  .
  config:DefaultEndpoint a elmo:DynamicEndpoint;
    elmo:pathPattern "/doc/";
    elmo:parameterMapper config:SubjectFromUrl;
  .
	# Representation and storage of concepts
	config:ConceptResource a elmo:Service;
		elmo:uri-pattern "/id/concept/";
		elmo:informationProduct config:SubjectData;
		elmo:transaction config:InsertOrReplaceConcept;
		
	.
  config:DeleteResource a elmo:Service;
    elmo:uri-pattern "/id/concept/";
    elmo:transaction config:DeleteConcept;
  .
}

#Concept Shape graph
GRAPH config:ConceptShapeGraph {
	# Constraint: a concept should have a prefLabel
	config:ConceptShape a sh:NodeShape;
		sh:targetClass skos:Concept;
		sh:property [
			sh:path skos:prefLabel;
			sh:minCount 1;
		];
	.
}
